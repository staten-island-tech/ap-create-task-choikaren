{"version":3,"sources":["../node_modules/regenerator-runtime/runtime.js","js/DOM.js","js/index.js"],"names":["DOMSelectors","dataBox","document","querySelector","favoriteBox","userSearch","submitBtn","favoriteBtn","clearFavoriteBtn","recipe","grabData","query","fetch","response","json","data","console","log","init","apiID","apiKey","userInput","displayData","dataResults","hits","forEach","recipeInstance","healthLabelsArray","healthLabels","healthLabel","push","insertAdjacentHTML","url","label","image","saveRecipe","savedArray","recipeArray","Array","from","getElementsByClassName","children","addEventListener","classList","add","innerHTML","savedRecipe","title","textContent","labels","link","imgSrc","displaySavedRecipes","toggleRecipeData","toggle","event","key","preventDefault","click","value"],"mappings":"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":"js.00a46daa.js","sourceRoot":"..\\src","sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n","\r\nconst DOMSelectors = {\r\n    dataBox: document.querySelector(\"#data\"),\r\n    favoriteBox: document.querySelector(\".favorites\"),\r\n    userSearch: document.querySelector(\"#recipeSearch\"),\r\n    submitBtn: document.querySelector(\"#submitBtn\"),\r\n    favoriteBtn: document.querySelector(\"#favoriteBtn\"),\r\n    clearFavoriteBtn: document.querySelector(\"#clearFavoriteBtn\"),\r\n    recipe: document.querySelector(\".recipe\"),\r\n\r\n\r\n}\r\n\r\n\r\nexport { DOMSelectors };\r\n","import \"regenerator-runtime/runtime\";\r\nimport { DOMSelectors } from \"./DOM\";\r\n\r\nconst grabData = async function (query) {\r\n  try {\r\n    const response = await fetch(query);\r\n    const data = await response.json();\r\n    console.log(data);\r\n    return data;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nconst init = function () {\r\n  const apiID = \"95cb0047\";\r\n  const apiKey = \"40c625a257418ae88ce46895dbab8f15\";\r\n  let userInput;\r\n\r\n  const displayData = async function () {\r\n    let query = `https://api.edamam.com/search?q=${userInput}&app_id=${apiID}&app_key=${apiKey}`;\r\n    const response = await grabData(query);\r\n    const dataResults = response.hits;\r\n    console.log(dataResults);\r\n\r\n    //display data function\r\n    dataResults.forEach(function (recipeInstance) {\r\n      //compile health label array into one string\r\n      let healthLabelsArray = [];\r\n      recipeInstance.recipe.healthLabels.forEach(function (healthLabel) {\r\n        healthLabelsArray.push(healthLabel);\r\n      });\r\n      //create each recipe card\r\n      DOMSelectors.dataBox.insertAdjacentHTML(\r\n        \"afterbegin\",\r\n        `\r\n                <div class=\"recipe\">\r\n                    <a  href=\"${recipeInstance.recipe.url}\">\r\n                        <div class=\"title\">${recipeInstance.recipe.label}</div>\r\n                        <div class=\"healthLabels\">${healthLabelsArray}</div>  \r\n                        <img src=\"${recipeInstance.recipe.image}\" >\r\n                        <div class=\"link hidden\">${recipeInstance.recipe.url}</div>\r\n                        <div class=\"imgSrc hidden\" >${recipeInstance.recipe.image}</div>\r\n                    </a>\r\n                    <div class=\"saveForLaterBtn\" >Save for Later?</div>\r\n                </div>\r\n            `\r\n      );\r\n    });\r\n    saveRecipe();\r\n  };\r\n\r\n  //display default data\r\n  displayData();\r\n\r\n  //array of favorited recipes\r\n  let savedArray = [];\r\n\r\n  const saveRecipe =  function () {\r\n    //array of recipes present at current moment\r\n    const recipeArray = Array.from(document.getElementsByClassName(\"recipe\"));\r\n\r\n    //for current recipes on screen, if the save for later btn is clicked, add selected recipe to new array for data to be saved\r\n    recipeArray.forEach(function (recipe) {\r\n      recipe.children[1].addEventListener(\"click\", function () {\r\n        recipe.children[1].classList.add(\"bold\");\r\n        recipe.children[1].innerHTML = \"Added to Saved Recipes\";\r\n\r\n        //get info of favorited recipe\r\n        let savedRecipe = {\r\n          title: recipe.children[0].children[0].textContent,\r\n          labels: recipe.children[0].children[1].textContent,\r\n          link: recipe.children[0].children[3].textContent,\r\n          imgSrc: recipe.children[0].children[4].textContent,\r\n        };\r\n\r\n        //push info to save info of favorited recipe\r\n        savedArray.push(savedRecipe);\r\n      });\r\n    });\r\n  };\r\n\r\n  const displaySavedRecipes = function () {\r\n    DOMSelectors.favoriteBox.innerHTML = \"\";\r\n    savedArray.forEach(function (savedRecipe) {\r\n      DOMSelectors.favoriteBox.insertAdjacentHTML(\r\n        \"afterbegin\",\r\n        `\r\n              <div class=\"recipe\">\r\n                  <a  href=\"${savedRecipe.link}\">\r\n                      <div class=\"title\">${savedRecipe.title}</div>\r\n                      <div class=\"healthLabels\">${savedRecipe.labels}</div>  \r\n                      <img src=\"${savedRecipe.imgSrc}\" >\r\n                  </a>\r\n              </div>\r\n              `\r\n      );\r\n    });\r\n  };\r\n\r\n  const toggleRecipeData = function () {\r\n    DOMSelectors.dataBox.classList.toggle(\"noDisplay\");\r\n    DOMSelectors.favoriteBox.classList.toggle(\"display\");\r\n    DOMSelectors.clearFavoriteBtn.classList.toggle(\"display\");\r\n\r\n    switch (DOMSelectors.favoriteBtn.innerHTML) {\r\n        case \"See Saved Recipes\":\r\n            DOMSelectors.favoriteBtn.innerHTML = \"Return to Search\"\r\n            break;\r\n        default:\r\n            DOMSelectors.favoriteBtn.innerHTML = \"See Saved Recipes\";\r\n    }\r\n  }\r\n\r\n  //switch from search results recipes to favorites recipes\r\n  DOMSelectors.favoriteBtn.addEventListener(\"click\", function () {\r\n    toggleRecipeData();\r\n    displaySavedRecipes();\r\n  });\r\n\r\n  //remove favorited(saved) recipes from array\r\n  DOMSelectors.clearFavoriteBtn.addEventListener(\"click\", function () {\r\n    savedArray = [];\r\n    //display newly emptied array\r\n    displaySavedRecipes();\r\n  });\r\n\r\n  //submit = keyup enter key\r\n  DOMSelectors.userSearch.addEventListener(\"keyup\", function (event) {\r\n    if (event.key === \"Enter\") {\r\n      event.preventDefault();\r\n      DOMSelectors.submitBtn.click();\r\n    }\r\n  });\r\n\r\n  //display data\r\n  DOMSelectors.submitBtn.addEventListener(\"click\", function () {\r\n\r\n    userInput = DOMSelectors.userSearch.value;\r\n    displayData();\r\n\r\n  });\r\n};\r\n\r\ninit();\r\n"]}